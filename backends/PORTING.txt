Guide to porting backends from 0.7.x to 0.8.x

 * Remove any Simulate* methods from pk-backend-*.c

 * Rename the 'gboolean only_trusted' arguments to
   'PkBitfield transaction_flags' in the following methods:
  - InstallFiles
  - InstallPackages
  - UpdateFiles
  - UpdateSystem

 * Add a 'PkBitfield transaction_flags' argument to the methods:
  - RemovePackages

 * If PK_TRANSACTION_FLAG_ENUM_ONLY_SIMULATE is set in transaction_flags
   then depsolve and return what would be done. Treat this just like
   the Simulate* methods, i.e. emit what would be done in an actual
   transaction.

 * If PK_TRANSACTION_FLAG_ENUM_ONLY_DOWNLOAD is set in transaction_flags
   then depsolve and download any packages or metadata, but don't
   actually make any database changes or change any files

 * Switch the RemovePackages() arguments to match the DBus API if you're
   using a spawned backend, i.e.
   transaction_flags, package_ids, allow_deps, auto_remove

 * Remove any references to Rollback, it's no longer available.

 * Remove any calls to pk_backend_set_sub_percentage() and replace them
   with calls to pk_backend_set_item_progress(package)

 * Add calls to pk_backend_set_locked() to declare when your backend holds
   write-lock on it's database. PackageKit will spawn multiple transactions
   which can read the database at any time. Not using this method will cause
   your backend to fail, as we then try to create multiple write transactions
   too.

 * Fail any transactions which requires lock with PK_ERROR_ENUM_LOCK_REQUIRED.
   PackageKit will then requeue the transaction as soon as another transaction
   releases lock. If the transaction fails multiple times, PK will emit the
   PK_ERROR_ENUM_CANNOT_GET_LOCK signal to frontends. If you continue to use
   this in your backends directly, your backend won't work properly with
   parallel transactions.
